{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Containers/robots.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","console","log","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","Searchfield","target","value","filterRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAgBeA,EAdF,SAACC,GAAW,IAEhBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACrB,OAAQ,yBAAKC,UAAY,+CACtB,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,iCACrB,6BACC,4BAAKF,GACL,2BAAIC,MCiBMK,EAtBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAKlB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GACpB,OAAQ,kBAAC,EAAD,CACPV,KAAMS,EAAKT,KACVC,MAAOQ,EAAKR,MACZC,GAAIO,EAAKP,GACTS,IAAKD,OAPP,MCVWH,EAAS,CACpB,CACEL,GAAI,EACJF,KAAM,gBACNY,SAAU,OACVX,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNY,SAAU,YACVX,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNY,SAAU,WACVX,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNY,SAAU,WACVX,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNY,SAAU,SACVX,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNY,SAAU,mBACVX,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNY,SAAU,eACVX,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNY,SAAU,gBACVX,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNY,SAAU,WACVX,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNY,SAAU,iBACVX,MAAO,2BChDIY,G,KARG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACC,yBAAKX,UAAU,OACf,2BAAOA,UAAU,mCAAmCY,KAAK,SAASC,YAAY,gBAAgBC,SAAWH,OCK7FI,G,MATA,SAACnB,GAEf,OADAoB,QAAQC,IAAIrB,GAEX,yBAAKsB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEzB,EAAM0B,YCkBKC,E,YArBd,WAAY3B,GAAQ,IAAD,8BAClB,4CAAMA,KACA4B,MAAQ,CACZC,UAAU,GAHM,E,+EAODC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAGG,KAAKJ,MAAMC,SACL,kEAGT,6BACEG,KAAKhC,MAAM0B,c,GAjBYQ,aC4CZC,E,YApCd,aAAc,IAAD,8BACZ,+CAODC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAPzC,EAAKZ,MAAQ,CACZpB,OAAQA,EACR8B,YAAa,IAJF,E,sEAiBH,IAAD,EAEwBN,KAAKJ,MAA7BpB,EAFA,EAEAA,OAAQ8B,EAFR,EAEQA,YACVG,EAAejC,EAAOkC,QAAO,SAAAC,GAClC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAASP,EAAYM,kBAEtD,OACA,yBAAKxC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAciB,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU5B,OAASiC,W,GA9BNP,aCGEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c1bf9c90.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n\r\n\tconst { name, email, id} = props;\r\n\treturn(\t<div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 \">\r\n\t\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id} ? 200Ã—200\" alt=\"robots\"`}/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n// import {robots} from \"./robots\";\r\n\r\nconst Cardlist = ({robots}) => {\r\n\t// if(true){\r\n\t// \tthrow new Error('Nooooooooo!');\r\n\t// }\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\treturn (<Card \r\n\t\t\tname={user.name}\r\n\t\t \temail={user.email}\r\n\t\t \tid={user.id}\r\n\t\t \tkey={i}\r\n\t\t \t />);\r\n\t\t \t}\r\n\t)\r\n\t\t\t};\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Cardlist;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from \"react\";\r\nimport 'tachyons';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\t\treturn(\r\n\t\t\t<div className=\"pa2\">\r\n\t\t\t<input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange= {searchChange} />\r\n\t\t\t</div>\r\n\t\t\t);\r\n}\r\n\r\nexport default SearchBox; ","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n\tconsole.log(props);\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: \"500px\" }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\t\tthis.state = {\r\n\t\t\t\thasError: false,\r\n\t\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError: true}) ;\r\n\t}\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn (<h1>Ooooops!. This does not look good.</h1>)\r\n\t\t};\r\n\t\treturn(\r\n\t\t<div>\r\n\t\t\t{this.props.children}\r\n\t\t</div>)\r\n\t\t};\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from \"react\";\r\nimport Cardlist from \"../Components/Cardlist\";\r\nimport {robots} from \"./robots\";\r\nimport SearchBox from \"../Components/SearchBox\";\r\nimport \"tachyons\" ;\r\nimport \"../Containers/App.css\";\r\nimport Scroll from \"../Components/Scroll\";\r\nimport ErrorBoundry from \"../Components/ErrorBoundry\";\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: robots,\r\n\t\t\tSearchfield: \"\"\r\n\t\t};\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({Searchfield: event.target.value})\r\n\t\t\r\n\t\t}\r\n\t\t// console.log(filterRobots);\r\n\r\n\r\n\t\r\n\r\n\trender() {\r\n\r\n\t\tconst { robots, Searchfield } = this.state;\r\n\t\tconst filterRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(Searchfield.toLowerCase())});\r\n\t\r\n\t\treturn(\r\n\t\t<div className=\"tc\">\r\n\t\t\t<h1 className=\"f1\">Robofriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t<ErrorBoundry>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<Cardlist robots={ filterRobots } />\r\n\t\t\t\t</Scroll>\r\n\t\t\t</ErrorBoundry>\r\n\t\t</div>\r\n\t\t)\r\n\t};}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./Containers/App\";\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\t\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}